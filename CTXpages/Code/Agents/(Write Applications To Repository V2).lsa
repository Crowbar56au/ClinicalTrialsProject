<?xml version='1.0' encoding='utf-8'?>
<agent name='(Write Applications To Repository V2)' alias='(WriteCopyToCTRepository)'
 xmlns='http://www.lotus.com/dxl' version='9.0' maintenanceversion='1.0' replicaid='CA257FDB001B5780'
 hide='v3' publicaccess='false' designerversion='8.5.3'>
<noteinfo noteid='5f6' unid='FDB0C8B743951C56CA257F7700070B79' sequence='14'>
<created><datetime dst='true'>20160315T121656,89+11</datetime></created>
<modified><datetime>20160628T151507,09+10</datetime></modified>
<revised><datetime>20160628T151507,08+10</datetime></revised>
<lastaccessed><datetime>20160628T151507,08+10</datetime></lastaccessed>
<addedtofile><datetime>20160623T152011,54+10</datetime></addedtofile></noteinfo>
<updatedby><name>CN=Srinivas Prasad/OU=DEVELOPER/O=TGADEV</name><name>CN=Bruce Langner/OU=DEVELOPER/O=TGADEV</name></updatedby>
<wassignedby><name>CN=Bruce Langner/OU=DEVELOPER/O=TGADEV</name></wassignedby>
<designchange><datetime>20160628T151507,15+10</datetime></designchange>
<trigger type='agentlist'/>
<documentset type='runonce'/><code event='options'><lotusscript>%REM
	Agent Write Applications To Repository
	Created Aug 13, 2014 by Wisnu Prawoto/DEVELOPER/TGADEV
	Description: Comments for Agent
%END REM
Option Public
Option Declare

Use "GetDatabases"
Use "MIMEJSONDataInterface"
Use "ls.snapps.JSONReader"


</lotusscript></code><code event='declarations'><lotusscript>Const ERR_PRIMARYARGUMENTSMISSING = 1001
Const ERR_INVALIDDOCUMENTID = 1002
Const ERR_EMPTYJSONSTORE = 1003
Const CS_APP_STATUS = "Validated" '"Pending Write to Repository"

Dim strNewStatus As String
Dim unid As String, appID As String, strID As String, strLU As String, newRecordUNID As String , oldRecordUNID As String
Dim appVer As String, appStage As String, strContact As String, strContactEmail As String, strContactFax As String, strContactPhone As String, strPart As String
Dim AppJSONEntryStore As MIMEJSONEntryStore
Dim JSONEntry As JSONObject

'Dim dcAPPS As notesdocumentcollection
Dim myAPPS() As NotesDocument
Dim listCTRepApps() As notesdocument
Dim DocCounter As Long
Dim vwLookup As NotesView
'/New CT August 2014
Dim vMedBioById As NotesView
Dim vNewMedBioIngredients As NotesView

</lotusscript></code><code event='initialize'><lotusscript>Sub Initialize
	On Error Goto ErrorHandler
	
	Print "Starting Copying to Repository and Archive..."
	
	Dim Ses As New NotesSession
	Dim dbThis As NotesDatabase, dbCTReg As NotesDatabase, dbArchive As NotesDatabase
	Dim sourceDocument As NotesDocument, registerDocument As NotesDocument, regJSONDocument As NotesDocument, JSONDocument As NotesDocument, nextDocument As NotesDocument
	Dim appDocument As NotesDocument
	Dim newDocWebArgs As Variant
	Dim secNames(5) As String
	Dim EmptyJSONArray As New JSONArray 
	Dim JSONString As String	'the string we've converted from the current Application's JSON file
	Dim agent As NotesAgent, item As notesitem
	Dim count As Integer,x As Long
	Dim doccount As Long
	Dim vwThis As NotesView, vwThisJSON As NotesView, vwThisApp As NotesView, vwCTRepoApp As NotesView, vwCTRepoJSON As NotesView
	Dim dc As NotesDocumentCollection, uiview As NotesUIView, ws As New NotesUIWorkspace
	Dim intDir As NotesDirectory, intServer As String
	Dim profDoc As NotesDocument
	'Set intDir = Ses.Getdirectory("DWCBRDOMI01/SVR/TGADEV")
	'intServer = intDir.Server
	Set dbThis = Ses.CurrentDatabase
	Set profDoc = dbThis.Getprofiledocument("System Profile Document", "")
	intServer = profDoc.GetItemValue("CTA_Server")(0)
	'MsgBox(intServer)
	'Exit sub
	
	Set dbCTReg = fdbGetDatabase("CTR_Path")
	Set dbArchive = New NotesDatabase(intServer, "ebs\trials\ctarchive.nsf")'
	'Set dbArchive = fdbGetDatabase("CTA_Path") '- path reference not working
	Set vwThisJSON = dbThis.GetView("JSONApplication")
	Set vwThis = dbThis.GetView("isw")
	Set vwThisApp = dbThis.GetView("AppsByApplicationId")	
	Set vwCTRepoApp = dbCTReg.GetView("AppsByApplicationId")	
	Set vwCTRepoJSON = dbCTReg.GetView("JSONApplication")
	Set vwLookup = dbThis.GetView("LookupAllByApplicationID")
	
	'/-- Added changes CT August 2014
	Set vMedBioById = dbCTReg.Getview("vwMedicineBiologicalById")
	Set vNewMedBioIngredients = dbCTReg.Getview("vwMedBioByAppId")
	
	vwThis.AutoUpdate = False
	
	Set sourceDocument = vwThis.Getfirstdocument()
	
	While Not sourceDocument Is Nothing
			
		If (sourceDocument.ApplicationStatus(0) = CS_APP_STATUS Or sourceDocument.ApplicationStatus(0) = "Completed") And Not sourceDocument.WriteStatus(0) = "1" Then
					
			appVer = Cstr(sourceDocument.ApplicationVersion(0)) 'DFS May 2013 - allow for numeric value
			appID = sourceDocument.ApplicationId(0)
			Print "Starting to process this Application: " &amp; appID+"~"+appVer
					
			Set appDocument = vwThisApp.getdocumentbykey(sourceDocument.ApplicationId(0))
			Call setStatus(appDocument)
			Set JSONDocument = vwThisJSON.getdocumentbykey(sourceDocument.ApplicationId(0))
			If Not JSONDocument Is Nothing Then
				
				appDocument.ApplicationStatus = strNewStatus
				JSONDocument.ApplicationStatus = strNewStatus
				
				'get handle to current mime json 
				Set AppJSONEntryStore = New MIMEJSONEntryStore(JSONDocument, "JSONMIMEFILE" ,"JSON.txt")
				
				If Cstr(appDocument.ApplicationStage(0)) = "4" Or Cstr(appDocument.ApplicationStage(0)) = "5" Then
					Call varyJSON()
				Else
					Call updateJSON()
				End If
				
				Call setSecurity(JSONDocument)
				Call JSONDocument.save(True, False)
				Call appDocument.save(True, False)
				
				'/ Added by Wisnu Prawoto - to convert JSON to Notes Documents
				If (sourceDocument.ApplicationStatus(0) = CS_APP_STATUS) Then
					JSONString = AppJSONEntryStore.toJSON
					doccount = JSONToNotesDocuments(JSONString)		
					
					secNames(0) = "SIME" + Cstr(JSONDocument.ClientID(0))
					secNames(1) = "[TGA]"
					secNames(2) = "[Admin]"
					secNames(3) = "[SIMEReader]"
					secNames(4) = "LocalDomainServers"
					secNames(5) = "OtherDomainServers"
					
					For x = Lbound(myAPPS) To Ubound(myAPPS)
						On Error Resume Next
						On Error Goto errorhandler
						If Not (myAPPS(x) Is Nothing) Then
							myAPPS(x).ReplaceItemValue "ApplicationVersion", sourceDocument.ApplicationVersion(0)
							myAPPS(x).ReplaceItemValue "WebAuthors", secNames
							Set item = myAPPS(x).GetFirstItem("WebAuthors")
							item.IsAuthors = True
							myAPPS(x).ReplaceItemValue "WebReaders", secNames
							Set item = myAPPS(x).GetFirstItem("WebReaders")
							item.IsReaders = True
							Call myAPPS(x).ComputeWithForm(False,False)
							myAPPS(x).save True, False, True		
							Call myAPPS(x).Copytodatabase(dbCTReg)	
							Call myAPPS(x).Remove(True)				
						End If
					Next

					Call MakeChildrenResponses(appID+"~"+sourceDocument.ApplicationVersion(0))	
				
				End If				
				'/ End of Added by Wisnu Prawoto - to convert JSON to Notes Documents								
				
				If Not (Cstr(appDocument.ApplicationStage(0)) = "4") Then
					Call archiveApp(appID+"~"+Cstr(appVer), dbArchive, dbCTReg)
				Else
					Call archiveApp(appID+"~"+Cstr(Cint(appVer)-1), dbArchive, dbCTReg)
				End If
				
				If (sourceDocument.ApplicationStatus(0) &lt;&gt; CS_APP_STATUS) Then
					Call registerApp(appID+"~"+appVer, dbCTReg)	
				Else
					Call JSONDocument.ReplaceItemValue("WriteStatus", "1")
					Call appDocument.ReplaceItemValue("WriteStatus", "1")
					Call JSONDocument.save(True, False)
					Call appDocument.save(True, False)
				End If
				Call archiveApp(appID+"~"+appVer, dbArchive, dbThis)
				
			End If
		End If

NextItem:		
		Set sourceDocument = vwThis.GetNextDocument(sourceDocument)	
	Wend
	
	Print "Finished Copying to Repository and Archive..."
	
ExitSub:
	Exit Sub
ErrorHandler:
	Print "CT - write to repository agent v2 error: Error - "; Err(); " at line "; Erl(); ", "; Error()
	Print "The ApplicationID and version caused an error is " &amp; appID+"~"+appVer
	Resume NextItem
End Sub

</lotusscript></code><code event='updAppDoc'><lotusscript>%REM
	Sub upAppDoc
	Description: Updates the application document with the Title of Study value
	Author; DFS April 2013 - TGA-INC-29052
%END REM
Sub updAppDoc(aryApp As Variant)
	
'Declarations
	
	Dim Nview As NotesView
	Dim Nappdoc As NotesDocument
	Dim iIndexA As Integer
	Dim iIndexB As Integer

'Continue after error
	On Error Resume Next

'Update Application docs with Trial Dates and Title of Study
 
	For iIndexA = Lbound(myAPPS) To Ubound(myAPPS)
		
		If myAPPS(iIndexA).HasItem("Type") Then
			If Lcase(myAPPS(iIndexA).getfirstitem("Type").text) = "application" Then
				
			'Find Application in array of titles
			
				iIndexB = Arraygetindex( aryApp, myAPPS(iIndexA).ApplicationID(0) )
								
			'Update Application Doc with Title of Study
				
				If Not( Isnull( iIndexB ) ) Then
					'MessageBox aryApp(iIndexB, 0) + " - " + aryApp(iIndexB, 1) 'Debug
					myAPPS(iIndexA).TitleOfStudy = aryApp(iIndexB, 1 )
					myAPPS(iIndexA).StartDate = aryApp(iIndexB, 2 )
					myAPPS(iIndexA).ExpectedCompletionDate = aryApp(iIndexB, 3 )
					
				End If 
				
			End If
		End If
	
	Next
	
End Sub

</lotusscript></code><code event='setSecurity'><lotusscript>Function setSecurity(JSONDocument As NotesDocument)
	
	Dim secNames(5) As String
	Dim item As NotesItem
	Dim formfields List As Variant
	
	Yield	'===== set security
	secNames(0) = "SIME" + JSONDocument.ClientID(0)
	secNames(1) = "[Admin]"
	secNames(2) = "[TGA]"
	secNames(3) = "[SIMEReader]"
	secNames(4) = "LocalDomainServers"
	secNames(5) = "OtherDomainServers"
	JSONDocument.ReplaceItemValue "WebAuthors", secNames
	Set item = JSONDocument.GetFirstItem("WebAuthors")
	item.IsAuthors = True
	JSONDocument.ReplaceItemValue "WebReaders", secNames
	Set item = JSONDocument.GetFirstItem("WebReaders")
	item.IsReaders = True
	
End Function

</lotusscript></code><code event='MakeChildrenResponses'><lotusscript>Sub MakeChildrenResponses(appID As String)
	On Error Goto hang
	
	Dim pDoc As NotesDocument
	Dim cDoc As NotesDocument
	Dim x As Integer, pId As String
	Dim formName As String
	Dim dc As NotesDocumentCollection
	Dim dcChilds As NotesDocumentCollection
	
	
	Call vMedBioById.Refresh()
	Call vNewMedBioIngredients.Refresh()
	Set dc = vNewMedBioIngredients.Getalldocumentsbykey(appID, True)
	If dc.count = 0 Then Exit Sub
	
	Set cDoc = dc.Getfirstdocument()
	Do While Not (cDoc Is Nothing)
		formName = cDoc.Form(0)
		pId = ""
		If Lcase(formName) = "medicineingredient"   Then
			pId = cDoc.medicineId(0) 
		End If
		If Lcase(formName) = "biologicalingredient" Then
			pId = cDoc.biologicalId(0)
		End If
		
		If pId &lt;&gt; "" Then
			'/ lookup for the parent
			Set pDoc = vMedBioById.Getdocumentbykey(pId, True)
			Set dcChilds = vMedBioById.GetAlldocumentsbykey(pId, True)
			'/ make response for the parent			
			If dcChilds.count &gt; 0 Then
				For x=1 To dcChilds.count
					Set pDoc = dcChilds.Getnthdocument(x)
					If Not (pDoc Is Nothing) Then
						If pDoc.DataSection(0) = cDoc.DataSection(0) Then
							Call cDoc.Makeresponse(pDoc)
							Call cDoc.Save(True, False)							
						End If
					End If
				Next
			End If
		End If
		Set cDoc = dc.GetNextdocument(cDoc)
	Loop
	Exit Sub
	
hang:
	Dim ErrorMessage As String 
	ErrorMessage = "Sub: MakeChildrenResponses Number:" + Cstr(Err()) +" ErrorMsg: " + Error() + " on line #:" + Cstr(Erl())
	Msgbox ErrorMessage
	Error Err, ErrorMessage
	Exit Sub
End Sub

</lotusscript></code><code event='updateJSON'><lotusscript>Function updateJSON( )
	
	Set JSONEntry = AppJSONEntryStore.GetFirstJSONEntry
	
	While Not (JSONEntry Is Nothing)
		Call AppJSONEntryStore.ReplaceItemValue(JSONEntry, "IsActiveVersion", "1")
		
		If AppJSONEntryStore.GetItemFirstValue(JSONEntry, "Type") = "Application" Then			
			Call AppJSONEntryStore.ReplaceItemValue(JSONEntry, "ApplicationStatus", strNewStatus)
			Call AppJSONEntryStore.ReplaceItemValue(JSONEntry, "ApplicationStage", appStage)
			Call AppJSONEntryStore.ReplaceItemValue(JSONEntry, "IsPushBackTriggered", "")
			Call AppJSONEntryStore.ReplaceItemValue(JSONEntry, "IsPushBackSubmittedBack", "")
		End If
%REM
		If AppJSONEntryStore.GetItemFirstValue(JSONEntry, "Type") = strPart Then			
			strContact = AppJSONEntryStore.GetItemValue(JSONEntry, "ContactName")
			strContactEmail = AppJSONEntryStore.GetItemValue(JSONEntry, "ContactEmail")
			strContactFax = AppJSONEntryStore.GetItemValue(JSONEntry, "ContactFax")
			strContactPhone = AppJSONEntryStore.GetItemValue(JSONEntry, "ContactPhone")
		End If
		
		If AppJSONEntryStore.GetItemFirstValue(JSONEntry, "Type") = "Part1" Then			
			Call AppJSONEntryStore.ReplaceItemValue(JSONEntry, "ContactName", strContact)
			Call AppJSONEntryStore.ReplaceItemValue(JSONEntry, "ContactEmail", strContactEmail)
			Call AppJSONEntryStore.ReplaceItemValue(JSONEntry, "ContactFax", strContactFax)
			Call AppJSONEntryStore.ReplaceItemValue(JSONEntry, "ContactPhone", strContactPhone)
		End If	
%END REM
		
		Set JSONEntry = AppJSONEntryStore.GetNextJSONEntry
	Wend
	
	'save the updated json
	Call AppJSONEntryStore.SaveJSONToMime()
	
End Function

</lotusscript></code><code event='setStatus'><lotusscript>Function setStatus(sourceDocument As NotesDocument)
	appStage = Cstr(sourceDocument.ApplicationStage(0))
	
	If sourceDocument.ClinicalTrialType(0) = "CTN" Then
		strPart = "Part1"
	Else
		strPart = "Part2"
	End If
	
	If appStage = "3" Then
		strNewStatus = "Completed"
	Else
		strNewStatus = "Active"	
		If appStage = "4" Then
			If sourceDocument.ClinicalTrialType(0) = "CTN" Then
				appStage = "1"
			Else
				appStage = "2"
			End If		
		End If
	End If
	
	appVer = Cstr(sourceDocument.ApplicationVersion(0)) 'DFS May 2013 - allow for numeric value
	appID = sourceDocument.ApplicationId(0)
	
End Function

</lotusscript></code><code event='varyJSON'><lotusscript>Function varyJSON()
	On Error Goto ErrorHandler
	
	Dim JSONEntries As Variant, AllSites As Variant
	Dim JSONEntryTrialTo As JSONObject
	
	JSONEntries = AppJSONEntryStore.GetEntriesByType("UpdateDetails")
	
	If Not Isnull(JSONEntries) Then
		Forall entry In JSONEntries
			Set JSONEntry = entry
			
			Select Case appStage
			Case "1"
				Set JSONEntryTrialTo = AppJSONEntryStore.GetEntryByIdentity(appID+"~"+appVer+"~Part1")
			Case "2"
				Set JSONEntryTrialTo = AppJSONEntryStore.GetEntryByIdentity(appID+"~"+appVer+"~Part2")
			End Select
			
			Call AppJSONEntryStore.MoveItemToAnotherEntry(JSONEntry, "Sites", JSONEntryTrialTo, True, False)				
			
			'clean up items here
			If  AppJSONEntryStore.HasItem(JSONEntry , "Sites") Then
				Call AppJSONEntryStore.RemoveItem(JSONEntry, "Sites")
				'Print "Removing JSON entry from app: " + appID
			End If
			
		End Forall
	End If
	
	Set JSONEntry = AppJSONEntryStore.GetFirstJSONEntry	
	Call AppJSONEntryStore.ReplaceItemValue(JSONEntry, "ApplicationStatus", strNewStatus)		
	Call AppJSONEntryStore.ReplaceItemValue(JSONEntry, "IsPushBackTriggered", "")
	Call AppJSONEntryStore.ReplaceItemValue(JSONEntry, "IsPushBackSubmittedBack", "")
	'save the updated json
	Call AppJSONEntryStore.SaveJSONToMime()
	
	Exit Function
ErrorHandler:
	Print "CT - write to repository agent error (Function varyJSON): Error - "; Err(); " at line "; Erl(); ", "; Error()
	Exit Function
End Function

</lotusscript></code><code event='JSONToNotesDocuments'><lotusscript>Function JSONToNotesDocuments(JSONString As String) As Variant 
	On Error Goto ErrorHandler
	Dim jsonReader As JSONReader
	Dim vResults As Variant
	Dim dbThis As NotesDatabase
	Dim isDocumentsArrayInit As Boolean
	Dim doccount As Long
	
	isDocumentsArrayInit = False
	
	Set jsonReader = New JSONReader
	Set vResults = jsonReader.Parse(JSONString)	'This is a JSONObject created using the ls.snapps.JSONReader library
	DocCount = ReadJSONObject(vResults) 'Recursivly called
	JSONToNotesDocuments = DocCount
ErrorResume:
	Exit Function
ErrorHandler:
	Msgbox  "CT CJTN [JSONToNotesDocuments]: ERROR#" + Cstr(Err) + ": " + Error(Err) + " at line " + Cstr(Erl)
	Resume ErrorResume
End Function

</lotusscript></code><code event='ReadJSONObject'><lotusscript>Function ReadJSONObject(JSONObj As Variant) As Long
	On Error Goto ErrorHandler
	Dim s As New NotesSession
	Dim JSONEntries As Variant, subJSONEntries As Variant
	Dim ObjType As String , subObjType As String 
	Dim doc As NotesDocument, isDocumentEntry As Boolean
	
	JSONEntries = JSONObj.Items
	
	isDocumentEntry=False
	If Iselement(JSONEntries("RecordUNID")) And Iselement(JSONEntries("id"))  And Iselement(JSONEntries("Type")) Then
		'Create a Notes Document only in the case where the entry has UNID and ID JSON Elements, as according to the JSON every document Entry has to have a UNID, Id aswell as a TYPE element
		Set doc = New NotesDocument(s.currentdatabase)
		ReadJSONObject=ReadJSONObject+ 1
		isDocumentEntry=True
	End If
	
	Forall JSONEntry In JSONEntries
		ObjType = Typename(JSONEntry)
		If  objType = "JSONOBJECT" Then
			'If this is an Object, its a Document/Document Collection entry call ReadJSONObject to process the nested document
			ReadJSONObject=ReadJSONObject + ReadJSONObject(JSONEntry)
		Elseif objType = "JSONARRAY" Then
			'JSONEntry.Items would be of type EMPTY in cases where the Object has no entries in the ITEMS array of JSON where the Dummy EMPTY JSON objects have been created
			If Typename(JSONEntry.Items) &lt;&gt; "EMPTY" Then
				subObjType = Typename(JSONEntry.Items(0))
				If subObjType &lt;&gt; "JSONOBJECT" Then	'THE REAL DATA ELEMENT / ENTRY Type MULTIVALUE
					If isDocumentEntry Then
						doc.ReplaceItemValue Listtag(JSONEntry), JSONEntry.Items
					End If
				Else	'Else This is a Collection of other Documents
					Forall JSONSubEntry In JSONEntry.Items
						ReadJSONObject=ReadJSONObject + ReadJSONObject(JSONSubEntry)
					End Forall
				End If
			Else
				If isDocumentEntry Then
					doc.ReplaceItemValue Listtag(JSONEntry), ""
				End If
			End If	
		Else
			If isDocumentEntry Then	'THE REAL DATA ELEMENT / ENTRY
				doc.ReplaceItemValue Listtag(JSONEntry), JSONEntry
			End If
		End If
	End Forall
	
	If isDocumentEntry Then
		DocCounter=DocCounter+1
		doc.ReplaceItemValue "IsNotes", 1
		doc.ReplaceItemValue "IsActiveVersion", "1"
		Redim Preserve myAPPS(DocCounter)
		Set myAPPS(DocCounter)= doc
	End If
	
ErrorResume:
	Exit Function
ErrorHandler:
	Msgbox  "CT CJTN [ReadJSONObject]: ERROR#" + Cstr(Err) + ": " + Error(Err) + " at line " + Cstr(Erl)
	Resume ErrorResume
End Function

</lotusscript></code><code event='registerApp'><lotusscript>Function registerApp(luKey As String, dbRegister As NotesDatabase)
	Dim s As New NotesSession
	Dim db As NotesDatabase
	Dim dc As NotesDocumentCollection
	Dim doc As NotesDocument
	Dim vwLookup As NotesView
	
	Set db = s.CurrentDatabase
	Set vwLookup = db.GetView("LookupAllByApplicationID")
	Set dc = vwLookup.GetAllDocumentsByKey(luKey)
	Set doc = dc.GetFirstDocument
	
	While Not doc Is Nothing
		
		If doc.ApplicationStage(0) = "3" Then
			Call doc.ReplaceItemValue("ApplicationStatus", "Completed")
		Elseif doc.ApplicationStatus(0) = "1" Or doc.ApplicationStatus(0) = "2" Then
			Call doc.ReplaceItemValue("ApplicationStatus", "Active")
		End If
		
		Call doc.ReplaceItemValue("SubmissionDate", Now) 
		Call doc.ReplaceItemValue("WriteStatus", "1")
		Call doc.Save( True ,False)
		
		Call doc.CopyToDatabase(dbRegister)
		
		Set doc = dc.GetNextDocument(doc)
	Wend
	
End Function

</lotusscript></code><code event='archiveApp'><lotusscript>Function archiveApp(luKey As String, dbArchive As NotesDatabase, dbThis As NotesDatabase)
	Dim dc As NotesDocumentCollection
	Dim doc As NotesDocument
	Dim vwLookup As NotesView
	
	
	Set vwLookup = dbThis.GetView("LookupAllByApplicationID")
	Set dc = vwLookup.GetAllDocumentsByKey(luKey)
	Set doc = dc.GetFirstDocument
	
	While Not doc Is Nothing
		'doc.isArchived = "1"		
		doc.ArchiveDate = Now
		Call doc.ReplaceItemValue("ApplicationStatus", "Archived")
		Call doc.ReplaceItemValue("archive", "1")		
		Call doc.Save(True,False)
		
		Call doc.CopyToDatabase(dbArchive)
		Set doc = dc.GetNextDocument(doc)
	Wend
	
End Function</lotusscript></code>
<item name='$POID'><datetime>20160620T120207,69+10</datetime></item></agent>

